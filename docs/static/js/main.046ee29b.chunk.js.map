{"version":3,"sources":["assets/js/gifFetch.js","components/Gif.js","components/ListGif.js","assets/js/useFetchGif.js","components/SearchGif.js","App.js","serviceWorker.js","index.js"],"names":["gifFetch","categoria","a","url","encodeURI","fetch","res","json","data","Gif","id","title","images","className","src","downsized_medium","alt","ListGif","props","useState","loading","state","setState","useEffect","then","gif","useFetchGif","Categoria","map","key","SearchGif","Input","setInput","onSubmit","e","preventDefault","setCategoria","type","placeholder","value","onChange","target","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"+RACaA,EAAQ,uCAAC,WAAMC,GAAN,mBAAAC,EAAA,6DAEZC,EAFY,0DAE2CC,UAAUH,GAFrD,sDAGFI,MAAMF,GAHJ,cAGZG,EAHY,gBAIDA,EAAIC,OAJH,cAIZC,EAJY,yBAMXA,GANW,2CAAD,sDCUNC,EATH,SAAC,GAAsB,EAArBC,GAAsB,IAAnBC,EAAkB,EAAlBA,MAAMC,EAAY,EAAZA,OACnB,OACI,yBAAKC,UAAU,QACX,yBAAKC,IAAKF,EAAOG,iBAAiBZ,IAAKa,IAAKL,IAC5C,2BAAIA,KCoBDM,G,MArBC,SAACC,GAAW,IAElBV,ECHe,SAACP,GAAa,IAAD,EAEXkB,mBAAS,CAC3BX,KAAK,GACLY,SAAQ,IAJqB,mBAE3BC,EAF2B,KAErBC,EAFqB,KAoBlC,OAZAC,qBAAU,WACS,KAAZtB,GACHD,EAASC,GACRuB,MAAK,SAAAC,GACFH,EAAS,CACPd,KAAKiB,EAAIjB,KACTY,SAAQ,SAKf,CAACnB,IACGoB,EDjBKK,CAAYR,EAAMS,WAAxBnB,KACN,OACE,oCACA,wBAAIK,UAAU,oBAAoBK,EAAMS,WACtC,yBAAKd,UAAU,kBAEbL,EAAKoB,KAAK,gBAAElB,EAAF,EAAEA,GAAGC,EAAL,EAAKA,MAAMC,EAAX,EAAWA,OAAX,OACR,kBAAC,EAAD,CACAiB,IAAKnB,EACLA,GAAIA,EACJC,MAAOA,EACPC,OAAQA,WEWLkB,G,MA3BG,SAACZ,GAAW,IAAD,EACHC,mBAAS,IADN,mBACtBY,EADsB,KACfC,EADe,KAYzB,OACI,0BAAMnB,UAAU,OAAOoB,SAVd,SAACC,GACbA,EAAEC,iBACFjB,EAAMkB,aAAaL,GACnBC,EAAS,MAQF,2BACEnB,UAAU,QACVwB,KAAK,OACLC,YAAY,aACZC,MAAOR,EACPS,SAVQ,SAACN,GAChBF,EAASE,EAAEO,OAAOF,UAYb,4BAAQ1B,UAAU,UAAlB,aCFG6B,MAlBf,WAAgB,IAAD,EACqBvB,mBAAS,IAD9B,mBACNQ,EADM,KACKS,EADL,KAGb,OACA,yBAAKvB,UAAU,aACb,gCACG,6BAAK,4CAER,kBAAC,EAAD,CACAuB,aAAcA,IAEd,kBAAC,EAAD,CACAT,UAAWA,M,MCJKgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.046ee29b.chunk.js","sourcesContent":["\r\nexport const gifFetch=async(categoria)=>{\r\n\r\n    const url=`https://api.giphy.com/v1/gifs/search?limit=10&q=${encodeURI(categoria)}&api_key=44VyrZbkuSjPiI5HY9OAqSePsiOUqrPB`\r\n    const res=await fetch(url);\r\n    const data=await res.json();\r\n\r\n    return data;\r\n}","import React from 'react'\r\n\r\nconst Gif = ({id,title,images}) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <img src={images.downsized_medium.url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Gif\r\n","import React from 'react'\r\nimport { useFetchGif } from '../assets/js/useFetchGif'\r\nimport Gif from '../components/Gif'\r\nimport  '../assets/css/grid.css'\r\n\r\nconst ListGif = (props) => {\r\n \r\n    const{data}=useFetchGif(props.Categoria);\r\n    return (\r\n      <>\r\n      <h1 className=\"titulo-categoria\">{props.Categoria}</h1>\r\n        <div className=\"card-container\">\r\n          {\r\n          data.map( ({id,title,images}) =>(\r\n            <Gif\r\n            key={id}\r\n            id={id}\r\n            title={title}\r\n            images={images}\r\n            />\r\n           ))\r\n          }\r\n        </div>\r\n      </>\r\n    )\r\n}\r\nexport default ListGif\r\n","import { useEffect, useState} from 'react'\r\nimport { gifFetch } from './gifFetch';\r\n\r\n\r\nexport const useFetchGif=(categoria)=>{\r\n\r\n    const [state,setState]=useState({\r\n         data:[],\r\n         loading:false\r\n    });\r\n\r\n  \r\n    useEffect(() => {\r\n        if(categoria!==''){\r\n        gifFetch(categoria)\r\n        .then(gif=>{\r\n            setState({\r\n              data:gif.data,\r\n              loading:true\r\n            })\r\n            \r\n        });\r\n    }\r\n    }, [categoria])\r\n    return state;\r\n\r\n}","import React, { useState } from 'react'\r\nimport '../assets/css/searchGif.css';\r\nconst SearchGif = (props) => {\r\nconst [Input, setInput] = useState('');\r\n\r\n   const submit =(e)=>{\r\n     e.preventDefault();\r\n     props.setCategoria(Input);\r\n     setInput('');\r\n   }\r\n\r\n   const verificarGif=(e)=>{\r\n       setInput(e.target.value)\r\n   }\r\n    return (\r\n        <form className='form' onSubmit={ submit }>\r\n            <input\r\n              className=\"input\" \r\n              type='text'\r\n              placeholder=\"buscar gif\"\r\n              value={Input}\r\n              onChange={verificarGif}\r\n            >\r\n            </input>\r\n            <button className=\"button\">Buscar</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchGif\r\n","import React ,{useState} from 'react';\nimport ListGif from './components/ListGif';\nimport SearchGif from './components/SearchGif';\n\nfunction App() {\n  const [Categoria, setCategoria] = useState('');\n  \n  return ( \n  <div className=\"container\">\n    <header>\n       <nav><h1>Git expert</h1></nav>\n    </header> \n    <SearchGif\n    setCategoria={setCategoria} \n    />\n    <ListGif\n    Categoria={Categoria}\n    />\n  </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './assets/css/index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}